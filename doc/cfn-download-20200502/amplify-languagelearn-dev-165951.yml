AWSTemplateFormatVersion: 2010-09-09
Description: Root stack for the Amplify AWS CloudFormation provider
Parameters:
  DeploymentBucketName:
    Description: Name of the common deployment bucket provided by the parent stack
    Type: String
    Default: DeploymentBucket
  AuthRoleName:
    Type: String
    Default: AuthRoleName
  UnauthRoleName:
    Type: String
    Default: UnauthRoleName
Resources:
  DeploymentBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref DeploymentBucketName
  AuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref AuthRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
  UnauthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref UnauthRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
  functionlanguagelearna1bd7c37CustomMessage:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: >-
        https://s3.amazonaws.com/amplify-languagelearn-dev-165951-deployment/amplify-cfn-templates/function/languagelearna1bd7c37CustomMessage-cloudformation-template.json
      Parameters:
        modules: verification-link
        resourceName: languagelearna1bd7c37CustomMessage
        REDIRECTURL: ''
        EMAILSUBJECT: ''
        EMAILMESSAGE: ''
        env: dev
  authlanguagelearna1bd7c37:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: >-
        https://s3.amazonaws.com/amplify-languagelearn-dev-165951-deployment/amplify-cfn-templates/auth/languagelearna1bd7c37-cloudformation-template.yml
      Parameters:
        identityPoolName: languagelearna1bd7c37_identitypool_a1bd7c37
        allowUnauthenticatedIdentities: false
        resourceNameTruncated: languaa1bd7c37
        userPoolName: languagelearna1bd7c37_userpool_a1bd7c37
        autoVerifiedAttributes: email
        mfaConfiguration: 'OFF'
        mfaTypes: SMS Text Message
        smsAuthenticationMessage: 'Your authentication code is {####}'
        smsVerificationMessage: 'Your verification code is {####}'
        emailVerificationSubject: Your verification code
        emailVerificationMessage: 'Your verification code is {####}'
        defaultPasswordPolicy: false
        passwordPolicyMinLength: 8
        passwordPolicyCharacters: ''
        requiredAttributes: email
        userpoolClientGenerateSecret: true
        userpoolClientRefreshTokenValidity: 30
        userpoolClientWriteAttributes: email
        userpoolClientReadAttributes: email
        userpoolClientLambdaRole: languaa1bd7c37_userpoolclient_lambda_role
        userpoolClientSetAttributes: false
        resourceName: languagelearna1bd7c37
        authSelections: identityPoolAndUserPool
        authRoleArn: !GetAtt 
          - AuthRole
          - Arn
        unauthRoleArn: !GetAtt 
          - UnauthRole
          - Arn
        useDefault: default
        usernameAttributes: email
        triggers: '{"CustomMessage":["verification-link"]}'
        userPoolGroupList: ''
        verificationBucketName: languagelearna1bd7c37verificationbucket
        parentStack: !Ref 'AWS::StackId'
        permissions: ''
        dependsOn: '[object Object]'
        functionlanguagelearna1bd7c37CustomMessageArn: !GetAtt 
          - functionlanguagelearna1bd7c37CustomMessage
          - Outputs.Arn
        functionlanguagelearna1bd7c37CustomMessageName: !GetAtt 
          - functionlanguagelearna1bd7c37CustomMessage
          - Outputs.Name
        env: dev
  UpdateRolesWithIDPFunction:
    DependsOn:
      - AuthRole
      - UnauthRole
      - authlanguagelearna1bd7c37
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+

          - - const response = require('cfn-response');
            - const aws = require('aws-sdk');
            - 'let responseData = {};'
            - 'exports.handler = function(event, context) {'
            - '  try {'
            - '    let authRoleName = event.ResourceProperties.authRoleName;'
            - '    let unauthRoleName = event.ResourceProperties.unauthRoleName;'
            - '    let idpId = event.ResourceProperties.idpId;'
            - '    let promises = [];'
            - '    let authParamsJson = { ''Version'': ''2012-10-17'',''Statement'': [{''Effect'': ''Allow'',''Principal'': {''Federated'': ''cognito-identity.amazonaws.com''},''Action'': ''sts:AssumeRoleWithWebIdentity'',''Condition'': {''StringEquals'': {''cognito-identity.amazonaws.com:aud'': idpId},''ForAnyValue:StringLike'': {''cognito-identity.amazonaws.com:amr'': ''authenticated''}}}]};'
            - '    let unauthParamsJson = { ''Version'': ''2012-10-17'',''Statement'': [{''Effect'': ''Allow'',''Principal'': {''Federated'': ''cognito-identity.amazonaws.com''},''Action'': ''sts:AssumeRoleWithWebIdentity'',''Condition'': {''StringEquals'': {''cognito-identity.amazonaws.com:aud'': idpId},''ForAnyValue:StringLike'': {''cognito-identity.amazonaws.com:amr'': ''unauthenticated''}}}]};'
            - '    if (event.RequestType == ''Delete'') {'
            - '        delete authParamsJson.Statement.Condition;'
            - '        delete unauthParamsJson.Statement.Condition;'
            - '        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};'
            - '        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};'
            - '        const iam = new aws.IAM({ apiVersion: ''2010-05-08'', region: event.ResourceProperties.region});'
            - '        promises.push(iam.updateAssumeRolePolicy(authParams).promise());'
            - '        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());'
            - '        Promise.all(promises)'
            - '         .then((res) => {'
            - '            console.log("delete response data" + JSON.stringify(res));'
            - '            response.send(event, context, response.SUCCESS, {});'
            - '         });'
            - '    }'
            - '    if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
            - '       const iam = new aws.IAM({ apiVersion: ''2010-05-08'', region: event.ResourceProperties.region});'
            - '        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};'
            - '        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};'
            - '        promises.push(iam.updateAssumeRolePolicy(authParams).promise());'
            - '        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());'
            - '        Promise.all(promises)'
            - '         .then((res) => {'
            - '            console.log("createORupdate" + res);'
            - '            console.log("response data" + JSON.stringify(res));'
            - '            response.send(event, context, response.SUCCESS, {});'
            - '         });'
            - '    }'
            - '  } catch(err) {'
            - '       console.log(err.stack);'
            - '       responseData = {Error: err};'
            - '       response.send(event, context, response.FAILED, responseData);'
            - '       throw err;'
            - '  }'
            - '};'
      Handler: index.handler
      Runtime: nodejs10.x
      Timeout: '300'
      Role: !GetAtt 
        - UpdateRolesWithIDPFunctionRole
        - Arn
  UpdateRolesWithIDPFunctionOutputs:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt 
        - UpdateRolesWithIDPFunction
        - Arn
      region: !Ref 'AWS::Region'
      idpId: !GetAtt 
        - authlanguagelearna1bd7c37
        - Outputs.IdentityPoolId
      authRoleName: !Ref AuthRoleName
      unauthRoleName: !Ref UnauthRoleName
  UpdateRolesWithIDPFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join 
        - ''
        - - !Ref AuthRoleName
          - '-idp'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: UpdateRolesWithIDPFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action: 'iam:UpdateAssumeRolePolicy'
                Resource: !GetAtt 
                  - AuthRole
                  - Arn
              - Effect: Allow
                Action: 'iam:UpdateAssumeRolePolicy'
                Resource: !GetAtt 
                  - UnauthRole
                  - Arn
Outputs:
  Region:
    Description: CloudFormation provider root stack Region
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${AWS::StackName}-Region'
  StackName:
    Description: CloudFormation provider root stack ID
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub '${AWS::StackName}-StackName'
  StackId:
    Description: CloudFormation provider root stack name
    Value: !Ref 'AWS::StackId'
    Export:
      Name: !Sub '${AWS::StackName}-StackId'
  DeploymentBucketName:
    Description: CloudFormation provider root stack deployment bucket name
    Value: !Ref DeploymentBucketName
    Export:
      Name: !Sub '${AWS::StackName}-DeploymentBucketName'
  AuthRoleArn:
    Value: !GetAtt 
      - AuthRole
      - Arn
  UnauthRoleArn:
    Value: !GetAtt 
      - UnauthRole
      - Arn
  AuthRoleName:
    Value: !Ref AuthRole
  UnauthRoleName:
    Value: !Ref UnauthRole
