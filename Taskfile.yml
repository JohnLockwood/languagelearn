version: '3'

tasks:

  test:
    desc: Runs all the tests
    cmds:
      - task: back:test

  # Real tasks
  back:test:
    desc: Runs Django tests, first refreshing venv if needed
    deps: [back:venv]
    dir:  django_app
    env:
      DJANGO_SETTINGS_MODULE:  django_app.settings

    cmds:      
      # - source ./venv/bin/activate
      - pytest 

  back:venv:
    desc: Refreshes venv if not in sync with requirements.txt
    generates:
      - django_app/venv/**
    sources:
      - django_app/requirements.txt
    cmds:
      - deactivate || true
      - python -m venv django_app/venv
      - source django_app/venv/bin/activate
      - pip install -r django_app/requirements.txt

# Silly tests I wrote at first
  hello:
    - task: greet
      vars: {GREET_TARGET:  "Johnsin"}

  greet:
    vars:
      GREET_TARGET: '{{default "World" .GREET_TARGET}}'
    cmds:
      - echo "Hello, {{.GREET_TARGET}}!"

  postgres:
    depends:
      - pgnetwork
    # Based on https://info.crunchydata.com/blog/easy-postgresql-12-and-pgadmin-4-setup-with-docker
    desc: Sets up a postgres database in docker and pgadmin
    cmds:
      - docker run --publish 5432:5432 --rm --volume=postgres:/pgdata --env-file=secret/pg-env.list --name="postgres" --hostname="postgres" --network="pgnetwork" --detach registry.developers.crunchydata.com/crunchydata/crunchy-postgres:centos7-12.2-4.2.2
      - docker run --publish 5050:5050 --rm --volume=pgadmin4:/var/lib/pgadmin --env-file=secret/pgadmin-env.list --name="pgadmin4" --hostname="pgadmin4" --network="pgnetwork" --detach registry.developers.crunchydata.com/crunchydata/crunchy-pgadmin4:centos7-12.2-4.2.2
    status:
      - docker network ls | grep pgnetwork
      - docker container ls | grep postgres
      - docker container ls | grep pgadmin4
    preconditions:
      - test -f secret/pgadmin-env.list
      - test -f secret/pg-env.list
  
    pgnetwork:
      cmds:
        - docker network create --driver bridge pgnetwork
      status:
        - docker network ls | grep pgnetwork

